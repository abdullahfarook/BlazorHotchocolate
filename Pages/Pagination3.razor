@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Reactive.Threading.Tasks
<RfSelect Id="my-customized2"
          ItemsProvider="@ItemsProvider"
                    @ref="ContactList"
                    TOption="IDealer"
                    Width="100%"
                    Placeholder="search"
          MaximumSelectedOptions="3"
          OnOptionsSearch="OnSearch"
                    OptionText="@(item => item.Name)"
                    OptionStyle="min-height: 40px;"
                    @bind-SelectedOptions="@SelectedItems">

    <LabelTemplate>        
        Select a dealer
        
    </LabelTemplate>

    @* Template used with each Selected items *@
    <SelectedOptionTemplate>
        <FluentPersona ImageSize="24px"
                            Name="@($"{context.Name}")"
                            Style="height: 26px; background: var(--neutral-fill-secondary-hover)"
                            DismissTitle="Remove"
                            Status="PresenceStatus.Available"
                            OnDismissClick="@(async () => await ContactList.RemoveSelectedItemAsync(context))" />
    </SelectedOptionTemplate>

    @* Template used with each Option items *@
    <OptionTemplate>
        <FluentPersona ImageSize="32px"
                            Status="PresenceStatus.Available"
                            StatusSize="PresenceBadgeSize.Small"
                            Name="@($"{context.Name}")" />
    </OptionTemplate>

    @* Template used when the maximum number of selected items (MaximumSelectedOptions) has been reached *@
    <MaximumSelectedOptionsMessage>
        The maximum number of selected items has been reached.
    </MaximumSelectedOptionsMessage>

    @* Content display at the top of the Popup area *@
    <HeaderContent>
        <FluentLabel Color="Color.Accent"
                     Style="padding: 8px; font-size: 11px; border-bottom: 1px solid var(--neutral-fill-stealth-hover);">
            Suggested contacts
        </FluentLabel>
    </HeaderContent>

    @* Content display at the bottom of the Popup area *@
    @* <FooterContent> *@
    @*     @if (!context.Any()) *@
    @*     { *@
    @*         <FluentLabel Style="font-size: 11px; text-align: center; width: 200px;"> *@
    @*             No results found *@
    @*         </FluentLabel> *@
    @*     } *@
    @* </FooterContent> *@
</RfSelect>
@code {

    record Dealer : IDealer
    {
        private IDealer _dealerImplementation;
        public Guid Id => Guid.NewGuid();

        public string Name => "Dealer Name";

        public string Cnic => _dealerImplementation.Cnic;

        public string Code => _dealerImplementation.Code;

        public IGetPaginatedDealers_Dealers_Nodes_Address Address => _dealerImplementation.Address;

        public string? Email => _dealerImplementation.Email;

        public bool? IsFiler => _dealerImplementation.IsFiler;

        public int Ntn => _dealerImplementation.Ntn;

        public string? PhoneNumber => _dealerImplementation.PhoneNumber;

        public DealerType Type => _dealerImplementation.Type;
    }
    RfSelect<IDealer> ContactList = default!;
    IEnumerable<IDealer> SelectedItems = Array.Empty<IDealer>();
    string? _search = null;

    private async Task OnSearch(OptionsSearchEventArgs<IDealer> e)
    {
        // e.Items = [new Dealer()];
        // e.Items = _persons.Where(i => i.LastName.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase) ||
        //                               i.FirstName.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
        //     .OrderBy(i => i.LastName);
        if(_search != e.Text)
        {
            _search = e.Text;
            Reset();
        }
        if (string.IsNullOrEmpty(e.Text))
        {
            filter = new DealerFilterInput();
        }
        else
        {
           
            filter.Name = new StringOperationFilterInput() {
                Contains = e.Text
            }; 
        }
        e.Items = await OnNext();
    }
    private Subject<List<IDealer>> ItemsSub = new();
    private IObservable<List<IDealer>> Items0 => ItemsSub.AsObservable();
    private int Initial = 0;

    Task GetItems(InfiniteScrollingItemsProviderRequest request)
    {
        // await Task.Delay(2000);
        return OnNext();
    }
    
    [Inject] IRedApi RedApi { get; set; }

    IDealer[] data = {
    };

    DealerFilterInput filter = new() {
    // Name = new StringOperationFilterInput() {
    //     Contains = "e"
    // }
    };
    int pageSize = 15;
    int index = 0;
    int? first = 0;
    int? last = null;
    string? after = null;
    string? before = null;
    string? startCursor = null;
    string? endCursor = null;
    bool hasNextPage = false;
    bool hasPreviousPage = false;
    bool loading = true;
    IDisposable? Subscription;

    void Reset()
    {
        pageSize = 15;
        index = 0;
        first = 0;
        last = null;
        after = null;
        before = null;
        startCursor = null;
        endCursor = null;
        hasNextPage = false;
        hasPreviousPage = false;
        loading = true;
    }
    private async Task<IEnumerable<IDealer>> FetchData()
    {
       var result = await RedApi.GetPaginatedDealers.Watch(filter, first, last, after, before).FirstAsync();
            data = result.Data!.Dealers!.Nodes!.ToArray();
            ItemsSub.OnNext(data.ToList());
            var pageInfo = result.Data!.Dealers!.PageInfo;
            startCursor = pageInfo!.StartCursor;
            endCursor = pageInfo!.EndCursor;
            hasNextPage = pageInfo!.HasNextPage;
            hasPreviousPage = pageInfo!.HasPreviousPage;
            StateHasChanged();
            return data;
    }
    private async Task<IEnumerable<IDealer>> OnNext()
    {
    // implement next
    // Get the endCursor from the current page data
        if (hasNextPage == false){
            data = Array.Empty<IDealer>();
        };
        string? endCursor = this.endCursor;

    // Set the after parameter to the endCursor
        after = endCursor;
        before = null;
        first = pageSize;
        last = null;
        return await FetchData();

    }
    private void OnPrevious()
    {
        if (hasPreviousPage == false) return;
    // implement previous
        string? startCursor = this.startCursor;

    // Set the before parameter to the startCursor
        before = startCursor;
        after = null;
        first = null;
        last = pageSize;

        FetchData();
    }


    public async Task Edit(IDealer dealer)
    {


        var random = new Random();
        var randomString = random.Next(1000, 9999).ToString();
        var updateDealerInput = new UpdateDealerInput() {
            Id = dealer.Id,
            Name = dealer.Name + randomString,
            Type = dealer.Type,
            Cnic = dealer.Cnic,
            IsFiler = dealer.IsFiler,
            Ntn = dealer.Ntn,
            Address = new AddressInput() {
                City = dealer.Address!.City,
                Country = dealer.Address!.Country,
            },
            Email = dealer.Email,
            PhoneNumber = dealer.PhoneNumber
        };
        await RedApi.UpdateDealer.ExecuteAsync(updateDealerInput);
    }

    private Task<IEnumerable<IDealer>> ItemsProvider(InfiniteScrollingItemsProviderRequest context)
    {
        if(_search != context.Search)
        {
            _search = context.Search;
            Reset();
        }
        if (string.IsNullOrEmpty(context.Search))
        {
            filter = new DealerFilterInput();
        }
        else
        {
           
            filter.Name = new StringOperationFilterInput() {
                Contains = context.Search
            }; 
        }
        return OnNext();
    }

}