@using System.Threading
@using BlazorHotchocolate.Models
@using Microsoft.AspNetCore.Components.Rendering;
@typeparam T
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div style="height:300px;overflow-y:scroll">
    <Virtualize Items="@_items" Context="item">
        @if (ItemTemplate != null)
           {
               @ItemTemplate(item)
           }
    </Virtualize>

@* @foreach (var item in _items) *@
@* { *@
@*     @if (ItemTemplate != null) *@
@*     { *@
@*         @ItemTemplate(item) *@
@*     } *@
@* } *@
@if (IsLoading)
{
    @LoadingTemplate
}

@RenderLastElement
</div>
@code {
    private List<T> _items = new();
    private ElementReference _lastItemIndicator;
    private DotNetObjectReference<InfiniteScroll<T>>? _currentComponentReference;
    private IJSObjectReference? _module;
    private IJSObjectReference? _instance;
    private bool _enumerationCompleted;
    private CancellationTokenSource? _loadItemsCts;

    private bool IsLoading = true;


    [Parameter]
    public RenderFragment<T>? ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment? LoadingTemplate { get; set; }

    /// <summary>
    /// Gets or sets the tag name of the HTML element that will be used as the virtualization spacer.
    /// One such element will be rendered before the visible items, and one more after them, using
    /// an explicit "height" style to control the scroll range.
    ///
    /// The default value is "div". If you are placing the <see cref="InfiniteScrolling{T}"/> instance inside
    /// an element that requires a specific child tag name, consider setting that here. For example when
    /// rendering inside a "tbody", consider setting <see cref="LastItemIndicatorElement"/> to the value "tr".
    /// </summary>
    [Parameter]
    public string LastItemIndicatorElement { get; set; } = "div";
    
    [Parameter]
    public IObservable<List<T>> ItemsProvider { get; set; }
    
    private IObservable<List<T>> _itemsProvider;
    bool isInitialized = false;
    [Parameter]
    public EventCallback<InfiniteScrollingItemsProviderRequest> OnNext { get; set; }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        if (_loadItemsCts != null)
            return;

        if (ItemsProvider == null)
            return;

        var items = _items;
        IsLoading = true;
        var cts = new CancellationTokenSource();
        _loadItemsCts = cts;
        try
        {
            StateHasChanged(); // Allow the UI to display the loading indicator
            try
            {
                await OnNext.InvokeAsync(new InfiniteScrollingItemsProviderRequest(items.Count, cts.Token));
            }
            catch (OperationCanceledException oce) when (oce.CancellationToken == cts.Token)
            {
                // No-op; we canceled the operation, so it's fine to suppress this exception.
            }
        }
        finally
        {
            // _loadItemsCts = null;
            // cts.Dispose();
        }

        StateHasChanged(); // Display the new items and hide the loading indicator
    }

    public async Task RefreshDataAsync()
    {
        _loadItemsCts?.Cancel(); // Will be disposed by the LoadMoreData method
        _loadItemsCts = null;

        _items = new List<T>();
        _enumerationCompleted = false;
        await LoadMoreItems();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Clear items when the provider changed
        // if (ItemsProvider != _itemsProvider)
        // {
        //     _items = new List<T>();
        //     _enumerationCompleted = false;
        // }
        //
        // _itemsProvider = ItemsProvider;
        if(isInitialized) return;
        ItemsProvider.Subscribe(async newItems =>
        {
            var length = _items.Count;
            _items.AddRange(newItems);

            if (_items.Count == length)
            {
                _enumerationCompleted = true;
            }
            else
            {
                System.Diagnostics.Debug.Assert(_instance != null);
                await _instance.InvokeVoidAsync("onNewItems");
            }
            IsLoading = false;
            _loadItemsCts?.Dispose();
            _loadItemsCts = null; 
            await InvokeAsync(StateHasChanged);
        });
        isInitialized = true;
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the IntersectionObserver
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/InfiniteScrolling.js");
            _currentComponentReference = DotNetObjectReference.Create(this);
            _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel the current load items operation
        if (_loadItemsCts != null)
        {
            _loadItemsCts.Dispose();
            _loadItemsCts = null;
        }

        // Stop the IntersectionObserver
        if (_instance != null)
        {
            await _instance.InvokeVoidAsync("dispose");
            await _instance.DisposeAsync();
            _instance = null;
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }

        _currentComponentReference?.Dispose();
    }

    private void RenderLastElement(RenderTreeBuilder __builder)
    {
        // This is the last element, so let's use a huge value
        __builder.OpenElement(1000, LastItemIndicatorElement);
        var style = _enumerationCompleted ? "height:0;width:0" : "height:1px;width:1px;flex-shrink:0";
        __builder.AddAttribute(1001, "style", style);
        __builder.AddElementReferenceCapture(1002, element => _lastItemIndicator = element);
        __builder.CloseElement();
    }
}