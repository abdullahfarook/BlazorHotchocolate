@inherits ListComponentBase<TOption>
@using Microsoft.AspNetCore.Components.Rendering
@typeparam TOption
<CascadingValue Value=@_internalListContext
                Name="ListContext"
                TValue="InternalListContext<TOption>"
                IsFixed=true>
    <div class="@ClassValue fluent-autocomplete-multiselect"
         style="@StyleValue">
        <FluentInputLabel ForId="@Id"
                          Label="@Label"
                          AriaLabel="@GetAriaLabel()"
                          ChildContent="@LabelTemplate"/>
        <fluent-text-field role="combobox"
                           id="@Id"
                           appearance="@Appearance.ToAttributeValue()"
                           disabled="@Disabled"
                           placeholder="@(this.SelectedOptions?.Any() == false ? Placeholder : string.Empty)"
                           aria-expanded="@(IsMultiSelectOpened ? "true" : "false")"
                           aria-controls="@(IsMultiSelectOpened ? IdPopup : string.Empty)"
                           aria-label="@(GetAriaLabel() ?? Label ?? Placeholder)"
                           current-value="@_valueText"
                           @onclick="@OnDropDownExpandedAsync"
                           @oninput="@InputHandlerAsync"
                           @onkeydown="@KeyDownHandlerAsync"
                           @onfocusout="@(e => { IsReachedMaxItems = false; })"
                           style="@ComponentWidth">
            @* Selected Items *@
            @if (this.SelectedOptions?.Any() == true)
            {
                <fluent-horizontal-scroll id="@IdScroll"
                                          style="width: 100%;"
                                          slot="start">
                    <fluent-flipper onclick="document.getElementById('@IdScroll').scrollToPrevious()"
                                    slot="previous-flipper"
                                    aria-hidden="false"
                                    aria-label="@TitleScrollToPrevious"
                                    title="@TitleScrollToPrevious"
                                    role="button"
                                    tabindex="0"
                                    class="previous fluent-autocomplete-previous"
                                    direction="previous">
                    </fluent-flipper>
                    <fluent-flipper onclick="document.getElementById('@IdScroll').scrollToNext()"
                                    slot="next-flipper"
                                    aria-hidden="false"
                                    aria-label="@TitleScrollToNext"
                                    title="@TitleScrollToNext"
                                    role="button"
                                    tabindex="0"
                                    class="next fluent-autocomplete-next"
                                    direction="next">
                    </fluent-flipper>
                    @foreach (var item in this.SelectedOptions)
                    {
                        if (SelectedOptionTemplate == null)
                        {
                            <FluentBadge OnDismissClick="@(e => RemoveSelectedItemAsync(item))"
                                         aria-label="@GetOptionText(item)">
                                @GetOptionText(item)
                            </FluentBadge>
                        }
                        else
                        {
                            @SelectedOptionTemplate(item)
                        }
                    }
                    &nbsp;
                </fluent-horizontal-scroll>
            }
            @if (!Disabled)
            {
                if (this.SelectedOptions?.Any() == true || !string.IsNullOrEmpty(_valueText))
                {
                    <FluentIcon Value="@(new CoreIcons.Regular.Size16.Dismiss())"
                                Width="12px"
                                Style="cursor: pointer;"
                                Slot="end"
                                Title="Clear"
                                OnClick="@OnClearAsync"/>
                }
                else
                {
                    <FluentIcon Value="@(new CoreIcons.Regular.Size16.Search())"
                                Width="16px"
                                Style="cursor: pointer;"
                                Slot="end"
                                Title="Search"
                                OnClick="@OnDropDownExpandedAsync"/>
                }
            }
        </fluent-text-field>

        @* List of available items *@
        @* @if (IsMultiSelectOpened) *@
        @* { *@
        <div style=@(IsMultiSelectOpened? "visibility: initial":"visibility:hidden")>
            <FluentOverlay OnClose="@(e => IsMultiSelectOpened = false)"
                           Visible="IsMultiSelectOpened"
                           Transparent="true"
                           FullScreen="true"/>
            <FluentAnchoredRegion Id="@IdPopup"
                                  Anchor="@Id"
                                  HorizontalDefaultPosition="HorizontalPosition.Right"
                                  HorizontalInset="true"
                                  VerticalDefaultPosition="@VerticalPosition.Unset"
                                  Style="margin-top: 10px; border-radius: calc(var(--control-corner-radius) * 2px); background-color: var(--neutral-layer-floating);"
                                  Shadow="ElevationShadow.Flyout">
                @if (HeaderContent != null)
                {
                    @HeaderContent(Items ?? Array.Empty<TOption>())
                }
                @if (Virtualized == false)
                {
                    <div role="listbox"
                         style="@ListStyleValue"
                         aria-label="List">
                        @if (Items != null)
                        {
                            var selectableItem = GetOptionValue(SelectableItem);
                            foreach (TOption item in Items)
                            {
                                var value = GetOptionValue(item);
                                <FluentOption TOption="TOption"
                                              Value="@value"
                                              Style="@OptionStyle"
                                              Class="@OptionClass"
                                              Selected="@GetOptionSelected(item)"
                                              Disabled="@(GetOptionDisabled(item) ?? false)"
                                              OnSelect="@OnSelectCallback(item)"
                                              selectable="@(value == selectableItem)">
                                    @if (OptionTemplate == null)
                                    {
                                        @GetOptionText(item)
                                    }
                                    else
                                    {
                                        @OptionTemplate(item)
                                    }
                                </FluentOption>
                            }
                        }
                    </div>
                }
                else
                {
                    <div role="listbox"
                            
                         aria-label="List">
                        @{ var selectableItem = GetOptionValue(SelectableItem); }
                        <Virtualize Items="@_items"
                                    Context="item">
                            @{ var value = GetOptionValue(item); }
                            <FluentOption TOption="TOption"
                                          Value="@value"
                                          Style="@OptionStyle"
                                          Class="@OptionClass"
                                          Selected="@GetOptionSelected(item)"
                                          Disabled="@(GetOptionDisabled(item) ?? false)"
                                          OnSelect="@OnSelectCallback(item)"
                                          selectable="@(value == selectableItem)">
                                @if (OptionTemplate == null)
                                {
                                    @GetOptionText(item)
                                }
                                else
                                {
                                    @OptionTemplate(item)
                                }
                            </FluentOption>
                        </Virtualize>
                        @if (IsLoading)
                        {
                            <div><span class="oi oi-reload spin"></span> Loading more items...</div>
                        }
                                    
                        @RenderLastElement
                    </div>
                }
                @if (FooterContent != null)
                {
                    @FooterContent(Items ?? Array.Empty<TOption>())
                    ;
                }
            </FluentAnchoredRegion>
        </div>
           
        @* }*@
        @* Tooltip *@
        @if (IsReachedMaxItems && MaximumSelectedOptionsMessage != null)
        {
            <FluentOverlay OnClose="@(e => IsReachedMaxItems = false)"
                           Visible="true"
                           Transparent="true"
                           FullScreen="true"/>
            <FluentAnchoredRegion Anchor="@Id"
                                  HorizontalDefaultPosition="HorizontalPosition.Right"
                                  HorizontalInset="true"
                                  VerticalDefaultPosition="@VerticalPosition.Unset"
                                  Style="margin-top: 10px; border-radius: calc(var(--control-corner-radius) * 2px); background-color: var(--neutral-layer-floating); padding: 10px;"
                                  Shadow="ElevationShadow.Flyout">
                @MaximumSelectedOptionsMessage
            </FluentAnchoredRegion>
        }
    </div>
</CascadingValue>
@code{

    private ElementReference _lastItemIndicator;
    private DotNetObjectReference<RfSelect<TOption>> _currentComponentReference;
    private IJSObjectReference? _module;
    private IJSObjectReference? _instance;
    private bool _enumerationCompleted;
    private CancellationTokenSource? _loadItemsCts;
    private InfiniteScrollingItemsProviderRequestDelegate<TOption>? _itemsProvider;
    private bool IsLoading => _loadItemsCts != null;
    [Parameter]
    public string LastItemIndicatorElement { get; set; } = "div";
    [JSInvokable]
    public async Task LoadMoreItems()
    {
        if (_loadItemsCts != null)
            return;

        if (ItemsProvider == null)
            return;

        var items = _items;
        var cts = new CancellationTokenSource();
        _loadItemsCts = cts;
        try
        {
            StateHasChanged(); // Allow the UI to display the loading indicator
            try
            {
                var newItems = await ItemsProvider(new InfiniteScrollingItemsProviderRequest(items.Count, _valueText, cts.Token));
                if (!cts.IsCancellationRequested)
                {
                    var length = items.Count;
                    items.AddRange(newItems);

                    if (items.Count == length)
                    {
                        _enumerationCompleted = true;
                    }
                    else
                    {
                        System.Diagnostics.Debug.Assert(_instance != null);
                        await _instance.InvokeVoidAsync("onNewItems");
                    }
                }
            }
            catch (OperationCanceledException oce) when (oce.CancellationToken == cts.Token)
            {
                // No-op; we canceled the operation, so it's fine to suppress this exception.
            }
        }
        finally
        {
            _loadItemsCts = null;
            cts.Dispose();
        }

        StateHasChanged(); // Display the new items and hide the loading indicator
    }
    
    public async Task RefreshDataAsync()
    {
        _loadItemsCts?.Cancel(); // Will be disposed by the LoadMoreData method
        _loadItemsCts = null;

        _items = new List<TOption>();
        _enumerationCompleted = false;
        await LoadMoreItems();
    }
    private void RenderLastElement(RenderTreeBuilder __builder)
    {
        // This is the last element, so let's use a huge value
        __builder.OpenElement(1000, LastItemIndicatorElement);
        var style = _enumerationCompleted ? "height:0;width:0" : "height:1px;width:1px;flex-shrink:0";
        __builder.AddAttribute(1001, "style", style);
        __builder.AddElementReferenceCapture(1002, element => _lastItemIndicator = element);
        __builder.CloseElement();
    }

}